// Code generated by thriftrw-plugin-envelope
// @generated

package servicegenerator

import (
	"fmt"
	"github.com/thriftrw/thriftrw-go/internal/envelope/exception"
	"github.com/thriftrw/thriftrw-go/wire"
	"github.com/thriftrw/thriftrw-go/ptr"
	"github.com/thriftrw/thriftrw-go/plugin/api"
)

// Client implements a ServiceGenerator client.
type client struct {
	send func(wire.Envelope) (wire.Envelope, error)
}

// NewClient builds a new ServiceGenerator client.
func NewClient(t func(wire.Envelope) (wire.Envelope, error)) api.ServiceGenerator {
	return &client{
		send: t,
	}
}

func (c *client) Generate(
	_Request *api.GenerateServiceRequest,
) (success *api.GenerateServiceResponse, err error) {
	args := GenerateHelper.Args(_Request)

	var body wire.Value
	body, err = args.ToWire()
	if err != nil {
		return
	}

	var envelope wire.Envelope
	envelope, err = c.send(wire.Envelope{
		Name:  "generate",
		Type:  wire.Call,
		Value: body,
	})
	if err != nil {
		return
	}

	switch {
	case envelope.Type == wire.Exception:
		var exc exception.TApplicationException
		if err = exc.FromWire(envelope.Value); err != nil {
			return
		}
		err = &exc
		return
	case envelope.Type != wire.Reply:
		err = fmt.Errorf("unknown envelope type for reply, got %v", envelope.Type)
		return
	}

	var result GenerateResult
	if err = result.FromWire(envelope.Value); err != nil {
		return
	}

	success, err = GenerateHelper.UnwrapResponse(&result)
	return
}

// Handler serves an implementation of the ServiceGenerator service.
type Handler struct {
	impl api.ServiceGenerator
}

// NewHandler builds a new ServiceGenerator handler.
func NewHandler(service api.ServiceGenerator) Handler {
	return Handler{
		impl: service,
	}
}

// Handle receives an enveloped request for ServiceGenerator service and
// returns an enveloped response.
func (h Handler) Handle(envelope wire.Envelope) (response wire.Envelope, err error) {
	response.Name = envelope.Name
	response.SeqID = envelope.SeqID
	response.Type = wire.Reply

	switch envelope.Name {

	case "generate":
		var args GenerateArgs
		if err = args.FromWire(envelope.Value); err != nil {

			response.Type = wire.Exception
			response.Value, err = (&exception.TApplicationException{
				Message: ptr.String(err.Error()),
				Type:    excType(exception.ExceptionTypeProtocolError),
			}).ToWire()
			return

		}

		var result *GenerateResult
		result, err = GenerateHelper.WrapResponse(
			h.impl.Generate(args.Request),
		)
		if err != nil {

			response.Type = wire.Exception
			response.Value, err = (&exception.TApplicationException{
				Message: ptr.String(err.Error()),
				Type:    excType(exception.ExceptionTypeInternalError),
			}).ToWire()
			return

		}

		response.Value, err = result.ToWire()
		if err != nil {

			response.Type = wire.Exception
			response.Value, err = (&exception.TApplicationException{
				Message: ptr.String(err.Error()),
				Type:    excType(exception.ExceptionTypeInternalError),
			}).ToWire()
			return

		}

	default:

		err = fmt.Errorf("unknown method %q", envelope.Name)

		response.Type = wire.Exception
		response.Value, err = (&exception.TApplicationException{
			Message: ptr.String(err.Error()),
			Type:    excType(exception.ExceptionTypeUnknownMethod),
		}).ToWire()
		return

	}
	return
}

func excType(x exception.ExceptionType) *exception.ExceptionType {
	return &x
}
