// Code generated by thriftrw
// @generated

package plugin

import (
	"fmt"
	"github.com/thriftrw/thriftrw-go/wire"
	"strings"
)

type GoodbyeArgs struct{}

func (v *GoodbyeArgs) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *GoodbyeArgs) FromWire(w wire.Value) error {
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}
	return nil
}

func (v *GoodbyeArgs) String() string {
	var fields [0]string
	i := 0
	return fmt.Sprintf("GoodbyeArgs{%v}", strings.Join(fields[:i], ", "))
}

func (v *GoodbyeArgs) MethodName() string {
	return "goodbye"
}

func (v *GoodbyeArgs) EnvelopeType() wire.EnvelopeType {
	return wire.Call
}

type GoodbyeResult struct{}

func (v *GoodbyeResult) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *GoodbyeResult) FromWire(w wire.Value) error {
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}
	return nil
}

func (v *GoodbyeResult) String() string {
	var fields [0]string
	i := 0
	return fmt.Sprintf("GoodbyeResult{%v}", strings.Join(fields[:i], ", "))
}

func (v *GoodbyeResult) MethodName() string {
	return "goodbye"
}

func (v *GoodbyeResult) EnvelopeType() wire.EnvelopeType {
	return wire.Reply
}

var GoodbyeHelper = struct {
	IsException    func(error) bool
	Args           func() *GoodbyeArgs
	WrapResponse   func(error) (*GoodbyeResult, error)
	UnwrapResponse func(*GoodbyeResult) error
}{}

func init() {
	GoodbyeHelper.IsException = func(err error) bool {
		switch err.(type) {
		default:
			return false
		}
	}
	GoodbyeHelper.Args = func() *GoodbyeArgs {
		return &GoodbyeArgs{}
	}
	GoodbyeHelper.WrapResponse = func(err error) (*GoodbyeResult, error) {
		if err == nil {
			return &GoodbyeResult{}, nil
		}
		return nil, err
	}
	GoodbyeHelper.UnwrapResponse = func(result *GoodbyeResult) (err error) {
		return
	}
}
