// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package plugin

import (
	"bytes"
	"log"
	"os"

	"github.com/thriftrw/thriftrw-go/internal/frame"
	"github.com/thriftrw/thriftrw-go/plugin/api"
	"github.com/thriftrw/thriftrw-go/plugin/api/service/plugin"
	"github.com/thriftrw/thriftrw-go/protocol"
	"github.com/thriftrw/thriftrw-go/wire"
)

const _fastPathFrameSize = 10 * 1024 * 1024 // 10 MB

var _proto = protocol.Binary

// Generator provides the Generator feature for ThriftRW>
type Generator interface {
	Generate(*api.GenerateRequest) (*api.GenerateResponse, error)
}

// Plugin defines a plugin.
type Plugin struct {
	Name string

	// If non-nil, Generator generates arbitrary code for services.
	Generator Generator
}

// Main serves the given plugin. It is the entry point to the plugin system.
// User-defined plugins should call Main with their Plugin definition.
func Main(p *Plugin) {
	// The plugin communicates with the ThriftRW process over stdout and stdin
	// of this process. Requests and responses are Thrift envelopes with a
	// 4-byte big-endian encoded length prefix.

	var features []api.Feature
	if p.Generator != nil {
		features = append(features, api.FeatureGenerator)
	}

	server := frame.NewServer(os.Stdin, os.Stdout)
	h := handler{server: server, plugin: p, features: features}
	if err := server.Serve(h); err != nil {
		log.Fatalf("plugin server failed with error: %v", err)
	}
}

type handler struct {
	server   *frame.Server
	plugin   *Plugin
	features []api.Feature
}

func (h handler) Handle(frame []byte) ([]byte, error) {
	p := h.plugin

	env, err := _proto.DecodeEnveloped(bytes.NewReader(frame))
	if err != nil {
		log.Fatalf("failed to decode envelope: %v", err) // TODO error handling
	}

	// TODO This should be code generated by a plugin :)
	responseEnv := wire.Envelope{
		Name:  env.Name,
		Type:  wire.Reply,
		SeqID: env.SeqID,
		Value: wire.NewValueStruct(wire.Struct{}), // default to empty struct
	}

	switch env.Name {
	case "handshake":
		result := plugin.HandshakeResult{
			Success: &api.HandshakeResponse{
				Name:       p.Name,
				ApiVersion: Version,
				Features:   h.features,
			},
		}

		responseEnv.Value, err = result.ToWire()
		if err != nil {
			log.Fatalf("handshake failed: %v", err) // TODO error handling
		}
	case "goodbye":
		h.server.Stop()
	case "generate":
		if p.Generator == nil {
			log.Fatal("I don't implement Generator") // TODO error handling
		}

		var args plugin.GenerateArgs
		if err := args.FromWire(env.Value); err != nil {
			log.Fatal("failed to decode generate request", err) // TODO error handling
		}

		resp, err := p.Generator.Generate(args.Request)
		if err != nil {
			log.Fatalf("generate request failed: %v", err) // TODO error handling
		}

		result := plugin.GenerateResult{Success: resp}
		responseEnv.Value, err = result.ToWire()
		if err != nil {
			log.Fatalf("generate failed: %v", err) // TODO error handling
		}
	default:
		log.Fatalf("unknown method: %v", env.Name) // TODO error handling
	}

	var buff bytes.Buffer
	if err := _proto.EncodeEnveloped(responseEnv, &buff); err != nil {
		log.Fatalf("failed to encode response: %v", err) // TODO error handling
	}

	return buff.Bytes(), nil
}
