package plugin

import (
	"bytes"
	"encoding/binary"
	"fmt"
	"io"
	"log"
	"os"

	"github.com/thriftrw/thriftrw-go/plugin/api"
	"github.com/thriftrw/thriftrw-go/plugin/api/service/plugin"
	"github.com/thriftrw/thriftrw-go/protocol"
	"github.com/thriftrw/thriftrw-go/wire"
)

const _fastPathFrameSize = 10 * 1024 * 1024 // 10 MB

var _proto = protocol.Binary

// Generator provides the Generator feature for ThriftRW>
type Generator interface {
	Generate(*api.GenerateRequest) (*api.GenerateResponse, error)
}

// Plugin defines a plugin.
type Plugin struct {
	Name string

	// If non-nil, Generator generates arbitrary code for services.
	Generator Generator
}

// Main serves the given plugin. It is the entry point to the plugin system.
// User-defined plugins should call Main with their Plugin definition.
func Main(p *Plugin) {
	// The plugin communicates with the ThriftRW process over stdout and stdin
	// of this process. Requests and responses are Thrift envelopes with a
	// 4-byte big-endian encoded length prefix.

	var features []api.Feature
	if p.Generator != nil {
		features = append(features, api.FeatureGenerator)
	}

	// TODO handshake with the thriftrw-go executable to verify API versions.
	running := true
	for running {
		frame, err := readFrame(os.Stdin)
		if err != nil {
			log.Fatalf("failed to read frame: %v", err) // TODO error handling
		}

		env, err := _proto.DecodeEnveloped(bytes.NewReader(frame))
		if err != nil {
			log.Fatalf("failed to decode envelope: %v", err) // TODO error handling
		}

		// TODO This should be code generated by a plugin :)
		responseEnv := wire.Envelope{
			Name:  env.Name,
			Type:  wire.Reply,
			SeqID: env.SeqID,
			Value: wire.NewValueStruct(wire.Struct{}), // default to empty struct
		}

		switch env.Name {
		case "handshake":
			result := plugin.HandshakeResult{
				Success: &api.HandshakeResponse{
					Name:       p.Name,
					ApiVersion: Version,
					Features:   features,
				},
			}

			responseEnv.Value, err = result.ToWire()
			if err != nil {
				log.Fatalf("handshake failed: %v", err) // TODO error handling
			}
		case "goodbye":
			running = false
		case "generate":
			if p.Generator == nil {
				log.Fatal("I don't implement Generator") // TODO error handling
			}

			var args plugin.GenerateArgs
			if err := args.FromWire(env.Value); err != nil {
				log.Fatal("failed to decode generate request", err) // TODO error handling
			}

			resp, err := p.Generator.Generate(args.Request)
			if err != nil {
				log.Fatalf("generate request failed: %v", err) // TODO error handling
			}

			result := plugin.GenerateResult{Success: resp}
			responseEnv.Value, err = result.ToWire()
			if err != nil {
				log.Fatalf("handshake failed: %v", err) // TODO error handling
			}
		default:
			log.Fatalf("unknown method: %v", env.Name) // TODO error handling
		}

		var buff bytes.Buffer
		if err := _proto.EncodeEnveloped(responseEnv, &buff); err != nil {
			log.Fatalf("failed to encode response: %v", err) // TODO error handling
		}

		if err := writeFrame(buff.Bytes(), os.Stdout); err != nil {
			log.Fatalf("failed to write response frame: %v", err) // TODO error handling
		}
	}
}

func readFrame(r io.Reader) ([]byte, error) {
	var lengthBuf [4]byte
	if _, err := io.ReadFull(r, lengthBuf[:]); err != nil {
		return nil, fmt.Errorf("failed to read frame header: %v", err)
	}

	length := int64(binary.BigEndian.Uint32(lengthBuf[:]))

	// Fast path
	if length < _fastPathFrameSize {
		buff := make([]byte, length)
		if _, err := io.ReadFull(r, buff); err != nil {
			return nil, err
		}

		return buff, nil
	}

	var buff bytes.Buffer
	copied, err := io.CopyN(&buff, r, length)
	if err != nil {
		return nil, err
	}

	if copied < length {
		return nil, fmt.Errorf("unexpected end of frame: expected %v bytes but got %v", length, copied)
	}

	return buff.Bytes(), nil
}

func writeFrame(frame []byte, w io.Writer) error {
	var lengthBuf [4]byte
	binary.BigEndian.PutUint32(lengthBuf[:], uint32(len(frame)))

	if _, err := w.Write(lengthBuf[:]); err != nil {
		return fmt.Errorf("failed to write response header: %v", err)
	}

	if _, err := w.Write(frame); err != nil {
		return fmt.Errorf("failed to write response: %v", err)
	}

	return nil
}
