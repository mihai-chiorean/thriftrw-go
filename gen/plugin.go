// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package gen

import (
	"fmt"
	"os"
	"os/exec"
	"strings"
	"sync"

	"github.com/thriftrw/thriftrw-go/internal"
	"github.com/thriftrw/thriftrw-go/internal/concurrent"
	"github.com/thriftrw/thriftrw-go/internal/envelope"
	"github.com/thriftrw/thriftrw-go/internal/multiplex"
	"github.com/thriftrw/thriftrw-go/internal/process"
	"github.com/thriftrw/thriftrw-go/plugin/api"
	"github.com/thriftrw/thriftrw-go/plugin/api/service/plugin"
	"github.com/thriftrw/thriftrw-go/plugin/api/service/servicegenerator"
	"github.com/thriftrw/thriftrw-go/protocol"
)

const (
	_pluginExecPrefix = "thriftrw-plugin-"
	apiVersion        = "1"
)

var _proto = protocol.Binary

// Plugin is the plugin API.
type Plugin interface {
	Close() error
	ServiceGenerator() api.ServiceGenerator
}

// MultiPlugin combines multiple plugins into one.
//
// Requests made to a MultiPlugin are sent to all associated plugins and their
// results are combined.
type MultiPlugin map[string]Plugin

var _ Plugin = MultiPlugin{}

// NewMultiPlugin builds a new MultiPlugin from a list of plugin names.
func NewMultiPlugin(pluginNames []string) (MultiPlugin, error) {
	var (
		lock  sync.Mutex
		multi = make(MultiPlugin)
	)

	err := concurrent.Range(pluginNames, func(_ int, name string) error {
		plugin, err := NewPlugin(name)
		if err != nil {
			return fmt.Errorf("failed to start plugin %q: %v", name, err)
		}

		lock.Lock()
		multi[name] = plugin
		lock.Unlock()
		return nil
	})

	if err == nil {
		return multi, nil
	}

	// Failed to start up. Close plugins that started successfully.
	errors := []error{err}
	if err := multi.Close(); err != nil {
		errors = append(errors, err)
	}
	return nil, internal.MultiError(errors)
}

// Close closes all the plugins associated with this MultiPlugin.
func (mp MultiPlugin) Close() error {
	return concurrent.Range(mp, func(name string, p Plugin) error {
		if err := p.Close(); err != nil {
			return fmt.Errorf("failed to stop plugin %q: %v", name, err)
		}
		return nil
	})
}

// ServiceGenerator returns a ServiceGenerator which combines the result of
// calling all the plugins associated with this plugin.
func (mp MultiPlugin) ServiceGenerator() api.ServiceGenerator {
	msg := make(MultiServiceGenerator)
	for name, plug := range mp {
		if sg := plug.ServiceGenerator(); sg != nil {
			msg[name] = sg
		}
	}
	return msg
}

// MultiServiceGenerator is a ServiceGenerator that sends requests to all
// associated plugins and combines their result.
type MultiServiceGenerator map[string]api.ServiceGenerator

var _ api.ServiceGenerator = MultiServiceGenerator{}

// Generate calls Generate on all associated ServiceGenerators and combines the
// results.
//
// If the files generated by multiple plugins conflict with each other, the
// request is failed.
func (msg MultiServiceGenerator) Generate(req *api.GenerateServiceRequest) (*api.GenerateServiceResponse, error) {
	var (
		lock      sync.Mutex
		files     = make(map[string][]byte)
		usedPaths = make(map[string]string) // path -> plugin name
	)

	err := concurrent.Range(msg, func(name string, sg api.ServiceGenerator) error {
		res, err := sg.Generate(req)
		if err != nil {
			return fmt.Errorf("call to plugin %q failed: %v", name, err)
		}

		lock.Lock()
		defer lock.Unlock()

		for path, contents := range res.Files {
			if strings.Contains(path, "..") {
				return fmt.Errorf(
					"plugin %q is attempting to write to a parent directory: "+
						`path %q contains ".."`, name, path)
			}

			if usedBy, ok := usedPaths[path]; ok {
				return fmt.Errorf(
					"plugin conflict: cannot write file %q for plugin %q: "+
						"plugin %q already wrote that file", path, name, usedBy)
			}

			usedPaths[path] = name
			files[path] = contents
		}

		return nil
	})

	return &api.GenerateServiceResponse{Files: files}, err
}

// plugin is a code generation plugin for ThriftRW.
type processPlugin struct {
	sync.RWMutex

	name      string
	transport *process.Client
	client    api.Plugin
	running   bool
	features  map[api.Feature]struct{}
}

// NewPlugin connects to the given plugin and performs a handshake with it.
func NewPlugin(name string) (Plugin, error) {
	execName := _pluginExecPrefix + name
	path, err := exec.LookPath(execName)
	if err != nil {
		return nil, fmt.Errorf("invalid plugin %q: executable %q not found on $PATH", name, execName)
	}

	// TODO(abg): Maybe plugins can have command line options. Figure out how to
	// get those from users and pass to the plugin.
	cmd := exec.Command(path)
	cmd.Stderr = os.Stderr // so that plugins can log

	transport, err := process.NewClient(cmd)
	if err != nil {
		return nil, fmt.Errorf("failed to open plugin %q: %v", name, err)
	}

	pluginClient := plugin.NewClient(
		multiplex.NewClient("Plugin", envelope.NewClient(_proto, transport)).Send,
	)

	response, err := pluginClient.Handshake(&api.HandshakeRequest{})
	if err != nil {
		return nil, fmt.Errorf("failed to handshake with plugin %q: %v", name, err)
	}

	if response.Name != name {
		return nil, fmt.Errorf(
			"failed to handshake with plugin %q: got incorrect plugin name %q",
			name, response.Name)
	}

	if response.ApiVersion != apiVersion {
		return nil, fmt.Errorf(
			"failed to handshake with plugin %q: got incorrect API version %q",
			name, response.ApiVersion)
	}

	features := make(map[api.Feature]struct{}, len(response.Features))
	for _, f := range response.Features {
		features[f] = struct{}{}
	}

	return &processPlugin{
		name:      name,
		transport: transport,
		client:    pluginClient,
		features:  features,
		running:   true,
	}, nil
}

// ServiceGenerator returns the ServiceGenerator for this plugin or nil if
// this plugin doesn't implement this feature.
func (p *processPlugin) ServiceGenerator() api.ServiceGenerator {
	p.RLock()
	running := p.running
	p.RUnlock()
	if !running {
		panic(fmt.Sprintf("plugin %q was stopped", p.name))
	}

	if _, ok := p.features[api.FeatureServiceGenerator]; !ok {
		return nil
	}

	// TODO(abg): The client won't check if the plugin is still running before
	// making ServiceGenerator calls. We should probably wrap it to check.

	return servicegenerator.NewClient(
		multiplex.NewClient(
			"ServiceGenerator",
			envelope.NewClient(_proto, p.transport),
		).Send,
	)
}

// Close closes the plugin.
func (p *processPlugin) Close() error {
	p.Lock()
	defer p.Unlock()

	if !p.running {
		return nil
	}

	if err := p.client.Goodbye(); err != nil {
		return err
	}

	if err := p.transport.Close(); err != nil {
		return err
	}

	p.running = false
	return nil
}
